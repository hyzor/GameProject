//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    PointLight gPointLight;             // Offset:    0, size:   80
    DirectionalLight gDirLights[3];     // Offset:   80, size:  192
    float3  gEyePosW;                   // Offset:  272, size:   12
    float   gMinDist;                   // Offset:  284, size:    4
    float   gMaxDist;                   // Offset:  288, size:    4
    float   gMinTess;                   // Offset:  292, size:    4
    float   gMaxTess;                   // Offset:  296, size:    4
    float   gFogStart;                  // Offset:  300, size:    4
    float   gFogRange;                  // Offset:  304, size:    4
    float4  gFogColor;                  // Offset:  320, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gWorldViewProjTex;         // Offset:  192, size:   64
    float4x4 gTexTransform;             // Offset:  256, size:   64
    float4x4 gShadowTransform;          // Offset:  320, size:   64
    Material gMaterial;                 // Offset:  384, size:   64
}

//
// 7 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
Texture2D gShadowMap;
TextureCube gCubeMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 TessDirLights3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_temps 4
                
                #line 104 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mov r0.xyz, v0.xyzx  // vOut<0,1,2>
                mov r1.xyz, v1.xyzx  // vOut<3,4,5>
                mov r2.xy, v2.xyxx  // vOut<6,7>
                mov r3.xyzw, v3.xyzw  // vOut<8,9,10,11>
                mov o3.xyzw, r3.xyzw  // VS<8,9,10,11>
                mov o0.xyz, r0.xyzx  // VS<0,1,2>
                mov o1.xyz, r1.xyzx  // VS<3,4,5>
                mov o2.xy, r2.xyxx  // VS<6,7>
                ret 
                // Approximately 9 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Position;               // Offset:   48
                //       float Range;                   // Offset:   60
                //       float3 Attenuation;            // Offset:   64
                //       float Padding;                 // Offset:   76
                //
                //   } gPointLight;                     // Offset:    0 Size:    80 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   80
                //       float4 Diffuse;                // Offset:   96
                //       float4 Specular;               // Offset:  112
                //       float3 Direction;              // Offset:  128
                //       float Padding;                 // Offset:  140
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  272 Size:    12
                //   float gMinDist;                    // Offset:  284 Size:     4
                //   float gMaxDist;                    // Offset:  288 Size:     4
                //   float gMinTess;                    // Offset:  292 Size:     4
                //   float gMaxTess;                    // Offset:  296 Size:     4
                //   float gFogStart;                   // Offset:  300 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  304 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProjTex;        // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  320 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float4 Reflect;                // Offset:  432
                //
                //   } gMaterial;                       // Offset:  384 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0  TRIEDGE  float   x   
                // SV_TessFactor            1   x           1  TRIEDGE  float   x   
                // SV_TessFactor            2   x           2  TRIEDGE  float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                
                #line 175 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xy
                dcl_input v[3][3].xyzw
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_temps 4
                mov r0.x, vOutputControlPointID  // hOut<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hOut<3,4,5>
                mov r1.xyz, v[r0.x + 0][1].xyzx  // hOut<6,7>
                mov r2.xy, v[r0.x + 0][2].xyxx  // hOut<8,9,10,11>
                mov r3.xyzw, v[r0.x + 0][3].xyzw  // HS<8,9,10,11>
                mov o3.xyzw, r3.xyzw  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4,5>
                mov o1.xyz, r1.xyzx  // HS<6,7>
                mov o2.xy, r2.xyxx
                
                #line 128
                ret 
                hs_join_phase 
                dcl_input vicp[3][0].xyz
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 2
                add r0.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx  // centerL<0:[-3.40282e+038f,3.40282e+038f],1:[-3.40282e+038f,3.40282e+038f],2:[-3.40282e+038f,3.40282e+038f]>
                add r0.xyz, r0.xyzx, vicp[2][0].xyzx
                mul r0.xyz, r0.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)  // centerW<0:NaN:Inf>
                mov r0.w, l(1.000000)  // centerW<1:NaN:Inf>
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // centerW<2:NaN:Inf>
                
                #line 138
                dp4 r1.y, r0.xyzw, cb1[1].xyzw
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // p<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 77
                nop 
                mov r1.xyz, r1.xyzx
                mov r0.xyz, -cb0[17].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // d<0:NaN:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x
                mov r0.y, -cb0[17].w
                add r0.x, r0.y, r0.x
                add r0.y, r0.y, cb0[18].x
                div r0.x, r0.x, r0.y  // s<0:[0f,1f]>
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mov r0.y, -cb0[18].z
                add r0.y, r0.y, cb0[18].y
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, cb0[18].z  // CalcTessFactor<0:NaN:Inf>
                
                #line 138
                mul r0.x, r0.x, l(1.000000)  // tess<0:NaN:Inf>
                
                #line 141
                exp r0.w, r0.x  // pt<0:NaN:Inf>
                
                #line 147
                mov r0.w, r0.w  // ConstantHS<0:NaN:Inf>
                mov r0.w, r0.w  // ConstantHS<1:NaN:Inf>
                mov r0.x, r0.w  // ConstantHS<2:NaN:Inf>
                mov r0.y, r0.w  // ConstantHS<3:NaN:Inf>
                mov r0.z, r0.w  // ConstantHS<0:[0f,64f],1:[0f,64f],2:[0f,64f],3:[0f,64f]>
                mov r0.w, r0.w  // ConstantHS<0:[0f,64f]>
                min r0.xyzw, r0.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<1:[0f,64f]>
                mov o0.x, r0.x  // ConstantHS<2:[0f,64f]>
                mov o1.x, r0.y  // ConstantHS<3:[0f,64f]>
                mov o2.x, r0.z
                
                // incorrect instruction offset in debug info
                mov o3.x, r0.w
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 47 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gWorldViewProjTex;        // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  320 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float4 Reflect;                // Offset:  432
                //
                //   } gMaterial;                       // Offset:  384 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0  TRIEDGE  float       
                // SV_TessFactor            1   x           1  TRIEDGE  float       
                // SV_TessFactor            2   x           2  TRIEDGE  float       
                // SV_InsideTessFactor      0   x           3   TRIINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float   xyzw
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], immediateIndexed
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xy
                dcl_input vicp[3][3].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_temps 7
                
                #line 204 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 210
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // dOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // dOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // dOut<6:NaN:Inf>
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // dOut<0:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // dOut<1:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // dOut<2:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // dOut<3:NaN:Inf>
                mul r3.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r4.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 219
                dp3 r4.x, r3.xyzx, cb0[4].xyzx  // dOut<7:NaN:Inf>
                dp3 r4.y, r3.xyzx, cb0[5].xyzx  // dOut<8:NaN:Inf>
                dp3 r4.z, r3.xyzx, cb0[6].xyzx  // dOut<9:NaN:Inf>
                
                #line 224
                mul r3.xy, vDomain.xxxx, vicp[0][2].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][2].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][2].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // tex<0:NaN:Inf,1:NaN:Inf>
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r5.x, r3.xyzw, cb0[16].xyzw  // dOut<10:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[17].xyzw  // dOut<11:NaN:Inf>
                mul r3.xyzw, vDomain.xxxx, vicp[0][3].xyzw
                mul r6.xyzw, vDomain.yyyy, vicp[1][3].xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r6.xyzw, vDomain.zzzz, vicp[2][3].xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw  // tangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // dOut<12:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // dOut<13:NaN:Inf>
                dp4 r6.z, r3.xyzw, cb0[2].xyzw  // dOut<14:NaN:Inf>
                dp4 r6.w, r3.xyzw, cb0[3].xyzw  // dOut<15:NaN:Inf>
                
                #line 232
                dp4 r3.x, r0.xyzw, cb0[20].xyzw  // dOut<16:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[21].xyzw  // dOut<17:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[22].xyzw  // dOut<18:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[23].xyzw  // dOut<19:NaN:Inf>
                mov o0.xyzw, r2.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o4.xyzw, r6.xyzw  // DS<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o5.xyzw, r3.xyzw  // DS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf,19:NaN:Inf>
                mov o1.xyz, r1.xyzx  // DS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r4.xyzx  // DS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r5.xyxx  // DS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 49 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Position;               // Offset:   48
                //       float Range;                   // Offset:   60
                //       float3 Attenuation;            // Offset:   64
                //       float Padding;                 // Offset:   76
                //
                //   } gPointLight;                     // Offset:    0 Size:    80 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   80
                //       float4 Diffuse;                // Offset:   96
                //       float4 Specular;               // Offset:  112
                //       float3 Direction;              // Offset:  128
                //       float Padding;                 // Offset:  140
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   192
                //   float3 gEyePosW;                   // Offset:  272 Size:    12
                //   float gMinDist;                    // Offset:  284 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  288 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  292 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  296 Size:     4 [unused]
                //   float gFogStart;                   // Offset:  300 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  304 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProjTex;        // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  320 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float4 Reflect;                // Offset:  432
                //
                //   } gMaterial;                       // Offset:  384 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samShadow                       sampler_c      NA          NA    0        1
                // gShadowMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                // TANGENT                  0   xyzw        4     NONE  float       
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[27], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 13
                
                #line 248 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 251
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[17].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 254
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 257
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                nop 
                mov r2.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                
                #line 218 "LightDef.fx"
                div r2.xyz, r2.zxyz, r2.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 221
                mov r2.x, r2.x  // depth<0:NaN:Inf>
                
                #line 241
                add r3.xy, r2.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.w, r3.xyxx, t0.xxxx, s0, r2.x
                add r0.w, r0.w, l(0.000000)  // percentLit<0:[0f,1f]>
                add r3.xy, r2.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xxxx, s0, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,2f]>
                add r3.xy, r2.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xxxx, s0, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,3f]>
                add r3.xy, r2.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xxxx, s0, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,4f]>
                add r3.xy, r2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xxxx, s0, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,5f]>
                add r3.xy, r2.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xxxx, s0, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,6f]>
                add r3.xy, r2.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xxxx, s0, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,7f]>
                add r3.xy, r2.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t0.xxxx, s0, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,8f]>
                add r2.yz, r2.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.yzyy, t0.xxxx, s0, r2.x
                add r0.w, r0.w, r1.w  // percentLit<0:[0f,9f]>
                
                #line 245
                div r0.w, r0.w, l(9.000000)  // percentLit<0:[0f,1f]>
                
                #line 291 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                nop 
                mov r2.xyz, cb1[24].xyzx  // mat<0,1,2>
                mov r3.xyz, cb1[25].xyzx  // mat<4,5,6>
                mov r4.xyzw, cb1[26].xyzw  // mat<8,9,10,11>
                mov r5.xyz, cb0[5].xyzx  // light<0,1,2>
                mov r6.xyz, cb0[6].xyzx  // light<4,5,6>
                mov r7.xyz, cb0[7].xyzx  // light<8,9,10>
                mov r8.xyz, cb0[8].xyzx  // light<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 129 "LightDef.fx"
                mov r8.xyz, -r8.xyzx  // lightVec<0,1,2>
                mul r5.xyz, r2.xyzx, r5.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                dp3 r1.w, r8.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                lt r2.w, l(0.000000), r1.w
                mov r8.xyz, -r8.xyzx
                dp3 r3.w, r8.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r9.xyz, r0.xyzx, r3.wwww
                add r8.xyz, r8.xyzx, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r3.w, r8.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r4.w
                exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                mul r8.xyz, r3.xyzx, r1.wwww
                mul r6.xyz, r6.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r8.xyz, r4.xyzx, r3.wwww
                mul r7.xyz, r7.xyzx, r8.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                movc r6.xyz, r2.wwww, r6.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r7.xyz, r2.wwww, r7.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mov r5.xyz, r5.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r6.xyz, r6.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r7.xyz, r7.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                mul r6.xyz, r0.wwww, r6.xyzx
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r7.xyz, r0.wwww, r7.xyzx
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291
                nop 
                mov r8.xyz, cb0[9].xyzx  // light<0,1,2>
                mov r9.xyz, cb0[10].xyzx  // light<4,5,6>
                mov r10.xyz, cb0[11].xyzx  // light<8,9,10>
                mov r11.xyz, cb0[12].xyzx  // light<12,13,14>
                
                #line 129 "LightDef.fx"
                mov r11.xyz, -r11.xyzx  // lightVec<0,1,2>
                mul r8.xyz, r2.xyzx, r8.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r11.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                lt r1.w, l(0.000000), r0.w
                mov r11.xyz, -r11.xyzx
                dp3 r2.w, r11.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r12.xyz, r0.xyzx, r2.wwww
                add r11.xyz, r11.xyzx, r12.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r2.w, r11.xyzx, r1.xyzx
                max r2.w, r2.w, l(0.000000)
                log r2.w, r2.w
                mul r2.w, r2.w, r4.w
                exp r2.w, r2.w  // specFactor<0:NaN:Inf>
                mul r11.xyz, r3.xyzx, r0.wwww
                mul r9.xyz, r9.xyzx, r11.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r11.xyz, r4.xyzx, r2.wwww
                mul r10.xyz, r10.xyzx, r11.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                movc r9.xyz, r1.wwww, r9.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r10.xyz, r1.wwww, r10.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mov r8.xyz, r8.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r9.xyz, r9.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r10.xyz, r10.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r5.xyz, r5.xyzx, r8.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r8.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r6.xyz, r6.xyzx, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r8.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r7.xyz, r7.xyzx, r8.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291
                nop 
                mov r8.xyz, cb0[13].xyzx  // light<0,1,2>
                mov r9.xyz, cb0[14].xyzx  // light<4,5,6>
                mov r10.xyz, cb0[15].xyzx  // light<8,9,10>
                mov r11.xyz, cb0[16].xyzx  // light<12,13,14>
                
                #line 129 "LightDef.fx"
                mov r11.xyz, -r11.xyzx  // lightVec<0,1,2>
                mul r2.xyz, r2.xyzx, r8.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r11.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                lt r1.w, l(0.000000), r0.w
                mov r8.xyz, -r11.xyzx
                dp3 r2.w, r8.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r0.xyz, r0.xyzx, r2.wwww
                add r0.xyz, r8.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r0.yzw, r3.xxyz, r0.wwww
                mul r0.yzw, r9.xxyz, r0.yyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r4.xyzx, r0.xxxx
                mul r1.xyz, r10.xyzx, r1.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mov r2.xyz, r2.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r0.xyz, r0.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r2.xyz, r2.xyzx, r5.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r6.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r1.xyz, r1.xyzx, r7.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 298
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r1.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 321
                mul r0.w, cb1[25].w, l(1.000000)  // litColor<3>
                mov o0.xyz, r0.xyzx  // PS_DirLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS_DirLight<3>
                ret 
                // Approximately 154 instruction slots used
                            
            };
        }

    }

    technique11 TessDirLights3FogTex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_temps 4
                
                #line 104 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mov r0.xyz, v0.xyzx  // vOut<0,1,2>
                mov r1.xyz, v1.xyzx  // vOut<3,4,5>
                mov r2.xy, v2.xyxx  // vOut<6,7>
                mov r3.xyzw, v3.xyzw  // vOut<8,9,10,11>
                mov o3.xyzw, r3.xyzw  // VS<8,9,10,11>
                mov o0.xyz, r0.xyzx  // VS<0,1,2>
                mov o1.xyz, r1.xyzx  // VS<3,4,5>
                mov o2.xy, r2.xyxx  // VS<6,7>
                ret 
                // Approximately 9 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Position;               // Offset:   48
                //       float Range;                   // Offset:   60
                //       float3 Attenuation;            // Offset:   64
                //       float Padding;                 // Offset:   76
                //
                //   } gPointLight;                     // Offset:    0 Size:    80 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   80
                //       float4 Diffuse;                // Offset:   96
                //       float4 Specular;               // Offset:  112
                //       float3 Direction;              // Offset:  128
                //       float Padding;                 // Offset:  140
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  272 Size:    12
                //   float gMinDist;                    // Offset:  284 Size:     4
                //   float gMaxDist;                    // Offset:  288 Size:     4
                //   float gMinTess;                    // Offset:  292 Size:     4
                //   float gMaxTess;                    // Offset:  296 Size:     4
                //   float gFogStart;                   // Offset:  300 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  304 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  320 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProjTex;        // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  320 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float4 Reflect;                // Offset:  432
                //
                //   } gMaterial;                       // Offset:  384 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0  TRIEDGE  float   x   
                // SV_TessFactor            1   x           1  TRIEDGE  float   x   
                // SV_TessFactor            2   x           2  TRIEDGE  float   x   
                // SV_InsideTessFactor      0   x           3   TRIINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 3
                dcl_output_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                
                #line 175 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[3][0].xyz
                dcl_input v[3][1].xyz
                dcl_input v[3][2].xy
                dcl_input v[3][3].xyzw
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_temps 4
                mov r0.x, vOutputControlPointID  // hOut<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hOut<3,4,5>
                mov r1.xyz, v[r0.x + 0][1].xyzx  // hOut<6,7>
                mov r2.xy, v[r0.x + 0][2].xyxx  // hOut<8,9,10,11>
                mov r3.xyzw, v[r0.x + 0][3].xyzw  // HS<8,9,10,11>
                mov o3.xyzw, r3.xyzw  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4,5>
                mov o1.xyz, r1.xyzx  // HS<6,7>
                mov o2.xy, r2.xyxx
                
                #line 128
                ret 
                hs_join_phase 
                dcl_input vicp[3][0].xyz
                dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
                dcl_output_siv o3.x, finalTriInsideTessFactor
                dcl_temps 2
                add r0.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx  // centerL<0:[-3.40282e+038f,3.40282e+038f],1:[-3.40282e+038f,3.40282e+038f],2:[-3.40282e+038f,3.40282e+038f]>
                add r0.xyz, r0.xyzx, vicp[2][0].xyzx
                mul r0.xyz, r0.xyzx, l(0.333333, 0.333333, 0.333333, 0.000000)  // centerW<0:NaN:Inf>
                mov r0.w, l(1.000000)  // centerW<1:NaN:Inf>
                dp4 r1.x, r0.xyzw, cb1[0].xyzw  // centerW<2:NaN:Inf>
                
                #line 138
                dp4 r1.y, r0.xyzw, cb1[1].xyzw
                dp4 r1.z, r0.xyzw, cb1[2].xyzw  // p<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 77
                nop 
                mov r1.xyz, r1.xyzx
                mov r0.xyz, -cb0[17].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // d<0:NaN:Inf>
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x
                mov r0.y, -cb0[17].w
                add r0.x, r0.y, r0.x
                add r0.y, r0.y, cb0[18].x
                div r0.x, r0.x, r0.y  // s<0:[0f,1f]>
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mov r0.y, -cb0[18].z
                add r0.y, r0.y, cb0[18].y
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, cb0[18].z  // CalcTessFactor<0:NaN:Inf>
                
                #line 138
                mul r0.x, r0.x, l(1.000000)  // tess<0:NaN:Inf>
                
                #line 141
                exp r0.w, r0.x  // pt<0:NaN:Inf>
                
                #line 147
                mov r0.w, r0.w  // ConstantHS<0:NaN:Inf>
                mov r0.w, r0.w  // ConstantHS<1:NaN:Inf>
                mov r0.x, r0.w  // ConstantHS<2:NaN:Inf>
                mov r0.y, r0.w  // ConstantHS<3:NaN:Inf>
                mov r0.z, r0.w  // ConstantHS<0:[0f,64f],1:[0f,64f],2:[0f,64f],3:[0f,64f]>
                mov r0.w, r0.w  // ConstantHS<0:[0f,64f]>
                min r0.xyzw, r0.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<1:[0f,64f]>
                mov o0.x, r0.x  // ConstantHS<2:[0f,64f]>
                mov o1.x, r0.y  // ConstantHS<3:[0f,64f]>
                mov o2.x, r0.z
                
                // incorrect instruction offset in debug info
                mov o3.x, r0.w
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 47 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gWorldViewProjTex;        // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  320 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float4 Reflect;                // Offset:  432
                //
                //   } gMaterial;                       // Offset:  384 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0  TRIEDGE  float       
                // SV_TessFactor            1   x           1  TRIEDGE  float       
                // SV_TessFactor            2   x           2  TRIEDGE  float       
                // SV_InsideTessFactor      0   x           3   TRIINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float   xyzw
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Triangle                                3
                //
                ds_5_0
                dcl_input_control_point_count 3
                dcl_tessellator_domain domain_tri
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], immediateIndexed
                dcl_input vDomain.xyz
                dcl_input vicp[3][0].xyz
                dcl_input vicp[3][1].xyz
                dcl_input vicp[3][2].xy
                dcl_input vicp[3][3].xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_temps 7
                
                #line 204 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
                mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 210
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // dOut<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // dOut<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // dOut<6:NaN:Inf>
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // dOut<0:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // dOut<1:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // dOut<2:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // dOut<3:NaN:Inf>
                mul r3.xyz, vDomain.xxxx, vicp[0][1].xyzx
                mul r4.xyz, vDomain.yyyy, vicp[1][1].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, vDomain.zzzz, vicp[2][1].xyzx
                add r3.xyz, r3.xyzx, r4.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 219
                dp3 r4.x, r3.xyzx, cb0[4].xyzx  // dOut<7:NaN:Inf>
                dp3 r4.y, r3.xyzx, cb0[5].xyzx  // dOut<8:NaN:Inf>
                dp3 r4.z, r3.xyzx, cb0[6].xyzx  // dOut<9:NaN:Inf>
                
                #line 224
                mul r3.xy, vDomain.xxxx, vicp[0][2].xyxx
                mul r3.zw, vDomain.yyyy, vicp[1][2].xxxy
                add r3.xy, r3.zwzz, r3.xyxx
                mul r3.zw, vDomain.zzzz, vicp[2][2].xxxy
                add r3.xy, r3.zwzz, r3.xyxx  // tex<0:NaN:Inf,1:NaN:Inf>
                mov r3.zw, l(0,0,0,1.000000)
                dp4 r5.x, r3.xyzw, cb0[16].xyzw  // dOut<10:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[17].xyzw  // dOut<11:NaN:Inf>
                mul r3.xyzw, vDomain.xxxx, vicp[0][3].xyzw
                mul r6.xyzw, vDomain.yyyy, vicp[1][3].xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r6.xyzw, vDomain.zzzz, vicp[2][3].xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw  // tangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                dp4 r6.x, r3.xyzw, cb0[0].xyzw  // dOut<12:NaN:Inf>
                dp4 r6.y, r3.xyzw, cb0[1].xyzw  // dOut<13:NaN:Inf>
                dp4 r6.z, r3.xyzw, cb0[2].xyzw  // dOut<14:NaN:Inf>
                dp4 r6.w, r3.xyzw, cb0[3].xyzw  // dOut<15:NaN:Inf>
                
                #line 232
                dp4 r3.x, r0.xyzw, cb0[20].xyzw  // dOut<16:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[21].xyzw  // dOut<17:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[22].xyzw  // dOut<18:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[23].xyzw  // dOut<19:NaN:Inf>
                mov o0.xyzw, r2.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o4.xyzw, r6.xyzw  // DS<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o5.xyzw, r3.xyzw  // DS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf,19:NaN:Inf>
                mov o1.xyz, r1.xyzx  // DS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r4.xyzx  // DS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r5.xyxx  // DS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 49 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Position;               // Offset:   48
                //       float Range;                   // Offset:   60
                //       float3 Attenuation;            // Offset:   64
                //       float Padding;                 // Offset:   76
                //
                //   } gPointLight;                     // Offset:    0 Size:    80 [unused]
                //   
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   80
                //       float4 Diffuse;                // Offset:   96
                //       float4 Specular;               // Offset:  112
                //       float3 Direction;              // Offset:  128
                //       float Padding;                 // Offset:  140
                //
                //   } gDirLights[3];                   // Offset:   80 Size:   192
                //   float3 gEyePosW;                   // Offset:  272 Size:    12
                //   float gMinDist;                    // Offset:  284 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  288 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  292 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  296 Size:     4 [unused]
                //   float gFogStart;                   // Offset:  300 Size:     4
                //   float gFogRange;                   // Offset:  304 Size:     4
                //   float4 gFogColor;                  // Offset:  320 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gWorldViewProjTex;        // Offset:  192 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  256 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  320 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  384
                //       float4 Diffuse;                // Offset:  400
                //       float4 Specular;               // Offset:  416
                //       float4 Reflect;                // Offset:  432
                //
                //   } gMaterial;                       // Offset:  384 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float       
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_constantbuffer cb1[27], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 14
                
                #line 248 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pIn<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 251
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[17].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 254
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 257
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 263
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 284
                nop 
                mov r3.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                
                #line 218 "LightDef.fx"
                div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 221
                mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 241
                add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, l(0.000000)  // percentLit<0:[0f,1f]>
                add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,2f]>
                add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,3f]>
                add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,4f]>
                add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,5f]>
                add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,6f]>
                add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,7f]>
                add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,8f]>
                add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, r3.yzyy, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.x  // percentLit<0:[0f,9f]>
                
                #line 245
                div r1.w, r1.w, l(9.000000)  // percentLit<0:[0f,1f]>
                
                #line 291 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                nop 
                mov r3.xyz, cb1[24].xyzx  // mat<0,1,2>
                mov r4.xyz, cb1[25].xyzx  // mat<4,5,6>
                mov r5.xyzw, cb1[26].xyzw  // mat<8,9,10,11>
                mov r6.xyz, cb0[5].xyzx  // light<0,1,2>
                mov r7.xyz, cb0[6].xyzx  // light<4,5,6>
                mov r8.xyz, cb0[7].xyzx  // light<8,9,10>
                mov r9.xyz, cb0[8].xyzx  // light<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 129 "LightDef.fx"
                mov r9.xyz, -r9.xyzx  // lightVec<0,1,2>
                mul r6.xyz, r3.xyzx, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                dp3 r3.w, r9.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                lt r4.w, l(0.000000), r3.w
                mov r9.xyz, -r9.xyzx
                dp3 r6.w, r9.xyzx, r0.xyzx
                add r6.w, r6.w, r6.w
                mov r6.w, -r6.w
                mul r10.xyz, r0.xyzx, r6.wwww
                add r9.xyz, r9.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r6.w, r9.xyzx, r1.xyzx
                max r6.w, r6.w, l(0.000000)
                log r6.w, r6.w
                mul r6.w, r5.w, r6.w
                exp r6.w, r6.w  // specFactor<0:NaN:Inf>
                mul r9.xyz, r4.xyzx, r3.wwww
                mul r7.xyz, r7.xyzx, r9.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r9.xyz, r5.xyzx, r6.wwww
                mul r8.xyz, r8.xyzx, r9.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                movc r7.xyz, r4.wwww, r7.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r8.xyz, r4.wwww, r8.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mov r6.xyz, r6.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r7.xyz, r7.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r8.xyz, r8.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                mul r7.xyz, r1.wwww, r7.xyzx
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r8.xyz, r1.wwww, r8.xyzx
                add r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291
                nop 
                mov r9.xyz, cb0[9].xyzx  // light<0,1,2>
                mov r10.xyz, cb0[10].xyzx  // light<4,5,6>
                mov r11.xyz, cb0[11].xyzx  // light<8,9,10>
                mov r12.xyz, cb0[12].xyzx  // light<12,13,14>
                
                #line 129 "LightDef.fx"
                mov r12.xyz, -r12.xyzx  // lightVec<0,1,2>
                mul r9.xyz, r3.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                dp3 r1.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                lt r3.w, l(0.000000), r1.w
                mov r12.xyz, -r12.xyzx
                dp3 r4.w, r12.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r13.xyz, r0.xyzx, r4.wwww
                add r12.xyz, r12.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r4.w, r12.xyzx, r1.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r5.w
                exp r4.w, r4.w  // specFactor<0:NaN:Inf>
                mul r12.xyz, r4.xyzx, r1.wwww
                mul r10.xyz, r10.xyzx, r12.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r12.xyz, r5.xyzx, r4.wwww
                mul r11.xyz, r11.xyzx, r12.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                movc r10.xyz, r3.wwww, r10.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r11.xyz, r3.wwww, r11.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mov r9.xyz, r9.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r10.xyz, r10.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r11.xyz, r11.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r9.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r7.xyz, r7.xyzx, r9.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r9.xyz, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r8.xyz, r8.xyzx, r9.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291
                nop 
                mov r9.xyz, cb0[13].xyzx  // light<0,1,2>
                mov r10.xyz, cb0[14].xyzx  // light<4,5,6>
                mov r11.xyz, cb0[15].xyzx  // light<8,9,10>
                mov r12.xyz, cb0[16].xyzx  // light<12,13,14>
                
                #line 129 "LightDef.fx"
                mov r12.xyz, -r12.xyzx  // lightVec<0,1,2>
                mul r3.xyz, r3.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                dp3 r1.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 136
                lt r3.w, l(0.000000), r1.w
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r0.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r0.xyz, r0.xyzx, r4.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r1.xyz, r4.xyzx, r1.wwww
                mul r1.xyz, r10.xyzx, r1.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r5.xyzx, r0.xxxx
                mul r0.xyz, r11.xyzx, r0.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                movc r1.xyz, r3.wwww, r1.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r0.xyz, r3.wwww, r0.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291 "E:\Programming\Visual Studio 2010\Projects\GameProject\GameProject\FX\BasicTess.fx"
                mov r3.xyz, r3.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r3.xyz, r3.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r1.xyz, r1.xyzx, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r8.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 298
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r1.xyz, r1.xyzx, r2.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 315
                mov r1.x, -cb0[18].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[19].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 318
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[20].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 321
                mul r0.w, r2.w, cb1[25].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PS_DirLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS_DirLight<3:NaN:Inf>
                ret 
                // Approximately 164 instruction slots used
                            
            };
        }

    }

}

